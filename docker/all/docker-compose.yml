version: '3.8'

services:
  # Zookeeper for Flink coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: emergency-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - emergency-network

  # Kafka for event streaming (optional, can be removed if direct Flink ingestion)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: emergency-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - emergency-network

  # Flink JobManager
  flink-jobmanager:
    image: flink:1.18-scala_2.12
    hostname: flink-jobmanager
    container_name: emergency-flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.memory.process.size: 1024m
        taskmanager.memory.process.size: 1024m
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
        execution.checkpointing.interval: 60000
        execution.checkpointing.mode: EXACTLY_ONCE
        execution.checkpointing.timeout: 600000
        jobmanager.execution.failover-strategy: region
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
      - ./flink/lib:/opt/flink/lib
      - ./flink/conf:/opt/flink/conf
    networks:
      - emergency-network

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.18-scala_2.12
    hostname: flink-taskmanager
    container_name: emergency-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 2
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.memory.process.size: 1024m
        taskmanager.memory.process.size: 1024m
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
      - ./flink/lib:/opt/flink/lib
      - ./flink/conf:/opt/flink/conf
    networks:
      - emergency-network

  # MySQL for StarRocks FE metadata
  mysql:
    image: mysql:8.0
    container_name: emergency-mysql
    environment:
      MYSQL_ROOT_PASSWORD: starrocks123
      MYSQL_DATABASE: starrocks_meta
      MYSQL_USER: starrocks
      MYSQL_PASSWORD: starrocks123
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - emergency-network

  # StarRocks Frontend (FE)
  starrocks-fe:
    image: starrocks/fe-ubuntu:3.2-latest
    hostname: starrocks-fe
    container_name: emergency-starrocks-fe
    depends_on:
      - mysql
    ports:
      - "8030:8030"  # HTTP port
      - "9020:9020"  # RPC port
    environment:
      - TZ=UTC
    volumes:
      - starrocks-fe-meta:/opt/starrocks/fe/meta
      - starrocks-fe-log:/opt/starrocks/fe/log
      - ./starrocks/fe.conf:/opt/starrocks/fe/conf/fe.conf
    command: ["/opt/starrocks/fe/bin/start_fe.sh"]
    networks:
      - emergency-network

  # StarRocks Backend (BE)
  starrocks-be:
    image: starrocks/be-ubuntu:3.2-latest
    hostname: starrocks-be
    container_name: emergency-starrocks-be
    depends_on:
      - starrocks-fe
    ports:
      - "8040:8040"  # HTTP port
      - "9060:9060"  # RPC port
    environment:
      - TZ=UTC
    volumes:
      - starrocks-be-storage:/opt/starrocks/be/storage
      - starrocks-be-log:/opt/starrocks/be/log
      - ./starrocks/be.conf:/opt/starrocks/be/conf/be.conf
    command: ["/opt/starrocks/be/bin/start_be.sh"]
    networks:
      - emergency-network

  # PostgreSQL for Dagster metadata
  dagster-postgres:
    image: postgres:15
    container_name: emergency-dagster-postgres
    environment:
      POSTGRES_USER: dagster
      POSTGRES_PASSWORD: dagster123
      POSTGRES_DB: dagster
    ports:
      - "5432:5432"
    volumes:
      - dagster-postgres-data:/var/lib/postgresql/data
    networks:
      - emergency-network

  # Dagster Daemon
  dagster-daemon:
    build:
      context: ./dagster
      dockerfile: Dockerfile
    container_name: emergency-dagster-daemon
    depends_on:
      - dagster-postgres
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster123
      DAGSTER_POSTGRES_HOST: dagster-postgres
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_CURRENT_IMAGE: emergency-dagster-daemon
    volumes:
      - ./dagster:/opt/dagster/app
      - dagster-storage:/opt/dagster/storage
    command: ["dagster-daemon", "run"]
    networks:
      - emergency-network

  # Dagster Webserver
  dagster-webserver:
    build:
      context: ./dagster
      dockerfile: Dockerfile
    container_name: emergency-dagster-webserver
    depends_on:
      - dagster-postgres
      - dagster-daemon
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster123
      DAGSTER_POSTGRES_HOST: dagster-postgres
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_CURRENT_IMAGE: emergency-dagster-webserver
    volumes:
      - ./dagster:/opt/dagster/app
      - dagster-storage:/opt/dagster/storage
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000"]
    networks:
      - emergency-network

  # Data Scrapers Service
  data-scrapers:
    build:
      context: ./scrapers
      dockerfile: Dockerfile
    container_name: emergency-data-scrapers
    depends_on:
      - kafka
      - flink-jobmanager
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FLINK_JOBMANAGER_HOST: flink-jobmanager
      FLINK_JOBMANAGER_PORT: 8081
    volumes:
      - ./scrapers:/app
      - scraper-data:/app/data
    networks:
      - emergency-network

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  flink-checkpoints:
  flink-savepoints:
  mysql-data:
  starrocks-fe-meta:
  starrocks-fe-log:
  starrocks-be-storage:
  starrocks-be-log:
  dagster-postgres-data:
  dagster-storage:
  scraper-data:

networks:
  emergency-network:
    driver: bridge