version: '3.8'

# Simplified Docker Compose for Public Emergency Data Pipeline
# Optimized for public data sharing with optional organization separation

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: emergency-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - public-emergency-network

  # Kafka for real-time public data streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: emergency-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Public data settings
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - public-emergency-network

  # Flink JobManager for public data processing
  flink-jobmanager:
    image: flink:1.18-scala_2.12
    hostname: flink-jobmanager
    container_name: emergency-flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.memory.process.size: 1024m
        taskmanager.memory.process.size: 1024m
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
        execution.checkpointing.interval: 60000
        execution.checkpointing.mode: EXACTLY_ONCE
        jobmanager.execution.failover-strategy: region
        # Public data optimization
        pipeline.auto-watermark-interval: 1000
        execution.runtime-mode: STREAMING
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
      - ./flink/lib:/opt/flink/lib
      - ./flink/conf:/opt/flink/conf
    networks:
      - public-emergency-network

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.18-scala_2.12
    hostname: flink-taskmanager
    container_name: emergency-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 2
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.memory.process.size: 1024m
        taskmanager.memory.process.size: 1024m
        taskmanager.numberOfTaskSlots: 4
        parallelism.default: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
      - ./flink/lib:/opt/flink/lib
      - ./flink/conf:/opt/flink/conf
    networks:
      - public-emergency-network

  # MySQL for StarRocks metadata (simplified)
  mysql:
    image: mysql:8.0
    container_name: emergency-mysql
    environment:
      MYSQL_ROOT_PASSWORD: public123
      MYSQL_DATABASE: emergency_public_meta
      MYSQL_USER: public_user
      MYSQL_PASSWORD: public123
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - public-emergency-network

  # StarRocks Frontend (simplified for public access)
  starrocks-fe:
    image: starrocks/fe-ubuntu:3.2-latest
    hostname: starrocks-fe
    container_name: emergency-starrocks-fe
    depends_on:
      - mysql
    ports:
      - "8030:8030"  # HTTP port for public access
      - "9030:9030"  # MySQL protocol port
    environment:
      - TZ=UTC
      - SR_FE_HOST=starrocks-fe
    volumes:
      - starrocks-fe-meta:/opt/starrocks/fe/meta
      - starrocks-fe-log:/opt/starrocks/fe/log
      - ./starrocks/fe.public.conf:/opt/starrocks/fe/conf/fe.conf
    command: ["/opt/starrocks/fe/bin/start_fe.sh"]
    networks:
      - public-emergency-network

  # StarRocks Backend (simplified)
  starrocks-be:
    image: starrocks/be-ubuntu:3.2-latest
    hostname: starrocks-be
    container_name: emergency-starrocks-be
    depends_on:
      - starrocks-fe
    ports:
      - "8040:8040"  # HTTP port
    environment:
      - TZ=UTC
    volumes:
      - starrocks-be-storage:/opt/starrocks/be/storage
      - starrocks-be-log:/opt/starrocks/be/log
      - ./starrocks/be.public.conf:/opt/starrocks/be/conf/be.conf
    command: ["/opt/starrocks/be/bin/start_be.sh"]
    networks:
      - public-emergency-network

  # PostgreSQL for Dagster metadata
  dagster-postgres:
    image: postgres:15
    container_name: emergency-dagster-postgres
    environment:
      POSTGRES_USER: dagster
      POSTGRES_PASSWORD: dagster123
      POSTGRES_DB: dagster
    ports:
      - "5432:5432"
    volumes:
      - dagster-postgres-data:/var/lib/postgresql/data
    networks:
      - public-emergency-network

  # Dagster Daemon (simplified)
  dagster-daemon:
    build:
      context: ./dagster
      dockerfile: Dockerfile.public
    container_name: emergency-dagster-daemon
    depends_on:
      - dagster-postgres
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster123
      DAGSTER_POSTGRES_HOST: dagster-postgres
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_CURRENT_IMAGE: emergency-dagster-daemon
      # Public data configuration
      DATA_CLASSIFICATION: PUBLIC
      PUBLIC_API_ENABLED: true
    volumes:
      - ./dagster:/opt/dagster/app
      - dagster-storage:/opt/dagster/storage
      - usage-analytics:/opt/dagster/storage/usage_logs
    command: ["dagster-daemon", "run"]
    networks:
      - public-emergency-network

  # Dagster Webserver (public interface)
  dagster-webserver:
    build:
      context: ./dagster
      dockerfile: Dockerfile.public
    container_name: emergency-dagster-webserver
    depends_on:
      - dagster-postgres
      - dagster-daemon
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster123
      DAGSTER_POSTGRES_HOST: dagster-postgres
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_CURRENT_IMAGE: emergency-dagster-webserver
      # Public access settings
      DATA_CLASSIFICATION: PUBLIC
      PUBLIC_API_ENABLED: true
      ENABLE_PUBLIC_DEMO: true
    volumes:
      - ./dagster:/opt/dagster/app
      - dagster-storage:/opt/dagster/storage
      - usage-analytics:/opt/dagster/storage/usage_logs
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000"]
    networks:
      - public-emergency-network

  # Public Data Scrapers (simplified)
  public-data-scrapers:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.public
    container_name: emergency-public-scrapers
    depends_on:
      - kafka
      - flink-jobmanager
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      FLINK_JOBMANAGER_HOST: flink-jobmanager
      FLINK_JOBMANAGER_PORT: 8081
      # Public data settings
      DATA_CLASSIFICATION: PUBLIC
      RATE_LIMIT_ENABLED: true
      USAGE_TRACKING_ENABLED: true
    volumes:
      - ./scrapers:/app
      - scraper-data:/app/data
      - usage-analytics:/app/usage_logs
    networks:
      - public-emergency-network

  # Public API Gateway (optional)
  public-api-gateway:
    image: nginx:alpine
    container_name: emergency-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/public.conf:/etc/nginx/nginx.conf
      - ./nginx/api_docs:/usr/share/nginx/html/docs
    depends_on:
      - dagster-webserver
      - starrocks-fe
    networks:
      - public-emergency-network

  # Redis for rate limiting and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: emergency-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - public-emergency-network

  # Usage Analytics Dashboard (optional)
  analytics-dashboard:
    image: grafana/grafana:latest
    container_name: emergency-analytics
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=public123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANONYMOUS_ENABLED=true
      - GF_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - public-emergency-network

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  flink-checkpoints:
  flink-savepoints:
  mysql-data:
  starrocks-fe-meta:
  starrocks-fe-log:
  starrocks-be-storage:
  starrocks-be-log:
  dagster-postgres-data:
  dagster-storage:
  scraper-data:
  usage-analytics:
  redis-data:
  grafana-data:

networks:
  public-emergency-network:
    driver: bridge
    # Public network - no special restrictions needed